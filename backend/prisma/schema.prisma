// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLogin        DateTime?
  isActive         Boolean   @default(true)
  role             String    @default("user") // user, admin
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?
  refreshToken     String?   
  
  // Relations
  profile          Profile?
  investments      Investment[]
  transactions     Transaction[]
  portfolios       Portfolio[]
}

model Profile {
  id              String    @id @default(uuid())
  userId          String    @unique
  bio             String?
  avatarUrl       String?
  phoneNumber     String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  dateOfBirth     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Investment {
  id              String    @id @default(uuid())
  userId          String
  amount          Float
  type            String    // stock, crypto, etc.
  status          String    // active, completed, cancelled
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id              String    @id @default(uuid())
  userId          String
  amount          Float
  type            String    // deposit, withdrawal, transfer
  status          String    // pending, completed, failed
  description     String?
  reference       String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
}

model Portfolio {
  id              String    @id @default(uuid())
  userId          String
  name            String
  description     String?
  totalValue      Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  assets          PortfolioAsset[]
}

model PortfolioAsset {
  id              String    @id @default(uuid())
  portfolioId     String
  assetName       String
  assetType       String    // stock, crypto, etc.
  quantity        Float
  purchasePrice   Float
  currentPrice    Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  portfolio       Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}
